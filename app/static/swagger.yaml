openapi: 3.0.0
info:
  description: Application server for Tutubo
  version: 1.0.0
  title: App Server

tags:
  - name: auth
    description: Operations related to authentication
  - name: users
    description: Operations about users
  - name: videos
    description: Operations for video interaction

paths:
  /login:
    post:
      tags:
        - auth
      summary: User login
      operationId: userLogin
      requestBody:
        description: Credentials user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: matiscakosky@hostname.com
                password:
                  type: string
                  example: '123457'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: n21IvyUVYTVyt76VuvYNIA0iababZWQsff
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: matias2202
                      email:
                        type: string
                        example: matiscakosky@hostame.com
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /register:
    post:
      tags:
        - auth
      summary: Register user into the system
      operationId: registerUser
      requestBody:
        description: Register credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: matiscakosky@hostname.com
                password:
                  type: string
                  example: '123457'
                username:
                  type: string
                  example: matiscako
      responses:
        '201':
          description: Register complete
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: User Profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: olifer97
                  email:
                    type: string
                    example: olifer97@gmail.com
                  friendship_status:
                    type: string
                    example: 'pending'
                  profile:
                    type: object
                    example:
                      picture: images.com/myProfilePic 
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        
    put:
      tags:
        - users
      summary: Edit user info
      operationId: editUserById
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      requestBody:
        description: New field values
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  example: images.com/myProfilePic
      responses:
        '200':
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /users/{id}/videos:
    get:
      tags:
        - users
        - videos
      summary: Get videos from user by id
      operationId: userVideos
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: User videos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
          
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    post:
      tags:
        - users
        - videos
      summary: Post a video to the user account
      operationId: userAddVideo
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      requestBody:
        description: Video data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoUpload'
      responses:
        '201':
          description: Video created
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'

  /users/my_requests:
    get:
      tags:
        - users
      summary: Get pending requests
      operationId: 'myRequest'
      description: ''
      parameters:
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: List of pending friend requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: username1

  /users/{id}/friend_request:
    post:
      tags:
        - users
      summary: Send a friend request
      operationId: 'friendRequest'
      description: ''
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Request sent successfully
        '404':
          $ref: '#/components/responses/CantSendInvitation'
        '400':
          $ref: '#/components/responses/ConflictFriends'

  /users/{id}/friends:
    post:
      tags:
        - users
      summary: Accept a friend request
      description: ''
      operationId: 'acceptFriendRequest'
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Friend accepted successfully
        '400':
          description: Cant accept with no request
          content:
            application/json:
              schema:
                properties:
                  reason:
                    type: string
                    example: Can't accept friendship without request
    get:
      tags:
        - users
      summary: Get friends of user
      description: ''
      operationId: 'friendsList'
      parameters:
        - $ref: '#/components/parameters/requiredPathUserId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: List of actual friends for user requested
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: username1

        '404':
          $ref: '#/components/responses/NotFoundResponse'


  /videos:
    get:
      tags:
        - videos
      summary: Get home videos
      operationId: homeVideos
      responses:
        '200':
          description: Home videos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'

  /videos/{video_id}:
    get:
      tags:
        - videos
      summary: Get video by id
      description: ''
      operationId: getVideoById
      parameters:
        - $ref: '#/components/parameters/requiredPathVideoId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: Video uploaded in Media Server
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/VideoDetail'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /videos/{video_id}/comments:
    get:
      tags:
        - videos
      summary: Get comments for video matching video_id
      operationId: videoComments
      parameters:
        - $ref: '#/components/parameters/requiredPathVideoId'
        - $ref: '#/components/parameters/accessTokenHeader'
      responses:
        '200':
          description: Video comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    post:
      tags:
        - videos
      summary: Add comment to a video
      operationId: addComment
      parameters:
        - $ref: '#/components/parameters/requiredPathVideoId'
        - $ref: '#/components/parameters/accessTokenHeader'
      requestBody:
        description: Comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpload'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /videos/{video_id}/likes:
    put:
      tags:
        - videos
      summary: Like a video
      operationId: addLike
      parameters:
        - $ref: '#/components/parameters/requiredPathVideoId'
        - $ref: '#/components/parameters/accessTokenHeader'
      requestBody:
        description: Has liked
        required: true
        content:
          application/json:
            schema:
              properties:
                liked:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Like updated
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

components:
  responses:
    UnauthorizedResponse:
      description: Not authorized
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Invalid data
    BadRequestResponse:
      description: Fields are incomplete or wrong
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Invalid request
    NotFoundResponse:
      description: Resource was not found
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Not Found
    ConflictResponse:
      description: Resource already exists
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Already taken
    ConflictFriends:
      description: User are already friends or pending
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Already friends
    CantSendInvitation:
      description: User is not available
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: Can't send friend request to inexistent user
    Forbidden:
      description: Forbidden request
      content:
        application/json:
          schema:
            properties:
              reason:
                type: string
                example: The token provided doesn't match
  parameters:
    accessTokenHeader:
      in: header
      name: access-token
      required: true
      schema:
        type: string
    requiredPathUserId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        minimum: 1
    requiredPathVideoId:
      in: path
      name: video_id
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:
    VideoUpload:
      type: object
      properties:
        url:
          type: string
          example: 'tutubo-storage-wequedecia.com/videos/sauiAHBDKlK12'
        author:
          type: string
          example: 'someOtherIndieArtist'
        title:
          type: string
          example: 'My First Video'
        visibility:
          type: string
          example: 'public'
        description:
          type: string
          example: 'This is my first video in TuTuBo - woohoo!'
        date:
          type: string
          example: '01/01/19 00:00:00'
        thumb:
          type: string
          example: 'tutubo-storage-wequedecia.com/images/YRJkshnka61yH'
      required:
        - url
        - author
        - title
        - visibility

    Video:
      type: object
      properties:
        author:
          type: string
          example: 'author 1'
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: 'a title'
        description:
          type: string
          example: 'a descrption'
        date:
          type: string
          example: '2019-01-02'
        visibility:
          type: string
          example: 'private'
        url:
          type: string
          example: 'www.host.com/video.mp4'
        thumb:
          type: string
          example: 'www.host.com/thumb.jpg'
        likes:
          type: integer
          example: 100000

    VideoDetail:
      type: object
      properties:
        author:
          type: string
          example: 'author 1'
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: 'a title'
        description:
          type: string
          example: 'a descrption'
        date:
          type: string
          example: '2019-01-02'
        visibility:
          type: string
          example: 'private'
        url:
          type: string
          example: 'www.host.com/video.mp4'
        thumb:
          type: string
          example: 'www.host.com/thumb.jpg'
        likes:
          type: integer
          example: 100000
        user_related_info:
          type: object
          properties:
            is_liked:
              type: boolean
              example: false

    CommentUpload:
      type: object
      properties:
        author:
          type: string
          example: 'author'
        content:
          type: string
          example: 'Great video!! Specially at minute {{14:05}}'
        timestamp:
          type: string
          example: '2019-01-02 10:14:50'

    Comment:
      type: object
      properties:
        comment_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        author:
          type: string
          example: 'author'
        content:
          type: string
          example: 'Great video!! Specially at minute {{14:05}}'
        timestamp:
          type: string
          example: '06/18/20 10:39:33'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: olifer97
        email:
          type: string
          example: olifer97@address.com
        profile:
          type: object
          example:
            picture: images.com/myProfilePic        
            